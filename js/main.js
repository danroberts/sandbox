// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Value = (function() {
    function Value(attributes) {
      var attrs;
      attrs = attributes || {};
      _.extend(this, attributes);
    }

    Value.prototype.attachReduce = function(group) {
      return this.reduceWithContext(group, this);
    };

    Value.prototype.reduceWithContext = function(group, context) {
      return group.reduce(_.bind(this.add, context), _.bind(this.remove, context), _.bind(this.initial, context));
    };

    return Value;

  })();

  this.BasicMathValue = (function(_super) {
    __extends(BasicMathValue, _super);

    function BasicMathValue() {
      return BasicMathValue.__super__.constructor.apply(this, arguments);
    }

    BasicMathValue.prototype.name = 'absGain';

    BasicMathValue.prototype.initialTarget = 'open';

    BasicMathValue.prototype.target = 'close';

    BasicMathValue.prototype.add = function(p, v) {
      p[this.name] += this.doMath(p, v);
      return p;
    };

    BasicMathValue.prototype.remove = function(p, v) {
      p[this.name] -= this.doMath(p, v);
      return p;
    };

    BasicMathValue.prototype.initial = function() {
      var obj;
      obj = {};
      obj[this.name] = 0;
      return obj;
    };

    BasicMathValue.prototype.mathFunction = function(initial, target) {
      return initial + target;
    };

    BasicMathValue.prototype.doMath = function(p, v) {
      var initial, target;
      initial = v[this.initialTarget] || p[this.initialTarget];
      target = v[this.target] || p[this.target];
      return this.mathFunction(initial, target);
    };

    return BasicMathValue;

  })(Value);

  this.AdditionValue = (function(_super) {
    __extends(AdditionValue, _super);

    function AdditionValue() {
      return AdditionValue.__super__.constructor.apply(this, arguments);
    }

    return AdditionValue;

  })(BasicMathValue);

  this.SubtractionValue = (function(_super) {
    __extends(SubtractionValue, _super);

    function SubtractionValue() {
      return SubtractionValue.__super__.constructor.apply(this, arguments);
    }

    SubtractionValue.prototype.mathFunction = function(initial, target) {
      return initial - target;
    };

    return SubtractionValue;

  })(BasicMathValue);

  this.AbsoluteMathValue = (function(_super) {
    __extends(AbsoluteMathValue, _super);

    function AbsoluteMathValue() {
      return AbsoluteMathValue.__super__.constructor.apply(this, arguments);
    }

    AbsoluteMathValue.prototype.add = function(p, v) {
      p[this.name] = this.doMath(p, v);
      return p;
    };

    AbsoluteMathValue.prototype.remove = function(p, v) {
      p[this.name] = this.doMath(p, v);
      return p;
    };

    return AbsoluteMathValue;

  })(BasicMathValue);

  this.AverageValue = (function(_super) {
    __extends(AverageValue, _super);

    function AverageValue() {
      return AverageValue.__super__.constructor.apply(this, arguments);
    }

    AverageValue.prototype.mathFunction = function(initial, target) {
      return initial / target;
    };

    return AverageValue;

  })(AbsoluteMathValue);

  this.PercentageValue = (function(_super) {
    __extends(PercentageValue, _super);

    function PercentageValue() {
      return PercentageValue.__super__.constructor.apply(this, arguments);
    }

    PercentageValue.prototype.mathFunction = function(initial, target) {
      return PercentageValue.__super__.mathFunction.apply(this, arguments) * 100;
    };

    return PercentageValue;

  })(AverageValue);

  this.CountValue = (function(_super) {
    __extends(CountValue, _super);

    function CountValue() {
      return CountValue.__super__.constructor.apply(this, arguments);
    }

    CountValue.prototype.add = function(p, v) {
      return p.count++;
    };

    CountValue.prototype.remove = function(p, v) {
      return p.count--;
    };

    CountValue.prototype.initial = function() {
      return {
        count: 0
      };
    };

    return CountValue;

  })(Value);

  this.GroupReducer = (function() {
    GroupReducer.prototype.values = [new CountValue, new SubtractionValue];

    function GroupReducer(attributes) {
      var attrs;
      attrs = attributes || {};
      _.extend(this, attributes);
    }

    GroupReducer.prototype.reduce = function(group) {
      var add, initial, remove;
      add = (function(_this) {
        return function(p, v) {
          _.each(_this.values, function(value) {
            return value.add(p, v);
          });
          return p;
        };
      })(this);
      remove = function(p, v) {};
      initial = (function(_this) {
        return function() {
          var obj;
          obj = {};
          _.each(_this.values, function(value) {
            return obj = _.extend(obj, value.initial());
          });
          return obj;
        };
      })(this);
      group.reduce(_.bind(add, this), _.bind(remove, this), _.bind(initial, this));
    };

    return GroupReducer;

  })();

  this.Bucket = (function() {
    function Bucket(attributes) {
      var attrs;
      attrs = attributes || {};
      _.extend(this, attributes);
    }

    Bucket.prototype.target = 'close';

    Bucket.prototype.create = function(crossfilter) {
      return crossfilter.dimension((function(_this) {
        return function(d) {
          return _this.comparator(d);
        };
      })(this));
    };

    Bucket.prototype.comparator = function(d) {
      return d[this.target];
    };

    return Bucket;

  })();

  this.StringBucket = (function(_super) {
    __extends(StringBucket, _super);

    function StringBucket() {
      return StringBucket.__super__.constructor.apply(this, arguments);
    }

    return StringBucket;

  })(Bucket);

  this.IfElseBucket = (function(_super) {
    __extends(IfElseBucket, _super);

    function IfElseBucket() {
      return IfElseBucket.__super__.constructor.apply(this, arguments);
    }

    IfElseBucket.prototype.if_statement = function(d) {
      return d.open > d.close;
    };

    IfElseBucket.prototype.true_value = 'Gain';

    IfElseBucket.prototype.false_value = 'Loss';

    IfElseBucket.prototype.comparator = function(d) {
      if (this.if_statement(d)) {
        return this.true_value;
      } else {
        return this.false_value;
      }
    };

    return IfElseBucket;

  })(Bucket);

  this.PercentageChangeBucket = (function(_super) {
    __extends(PercentageChangeBucket, _super);

    function PercentageChangeBucket() {
      return PercentageChangeBucket.__super__.constructor.apply(this, arguments);
    }

    PercentageChangeBucket.prototype.target = 'close';

    PercentageChangeBucket.prototype.percentage = 'open';

    PercentageChangeBucket.prototype.comparator = function(d) {
      var percentage, target;
      target = d[this.target];
      percentage = d[this.percentage];
      return Math.round((target - percentage) / percentage * 100);
    };

    return PercentageChangeBucket;

  })(Bucket);

  this.TimeBucket = (function(_super) {
    __extends(TimeBucket, _super);

    function TimeBucket() {
      return TimeBucket.__super__.constructor.apply(this, arguments);
    }

    TimeBucket.prototype.target = 'Date';

    return TimeBucket;

  })(Bucket);

  this.YearBucket = (function(_super) {
    __extends(YearBucket, _super);

    function YearBucket() {
      return YearBucket.__super__.constructor.apply(this, arguments);
    }

    YearBucket.prototype.comparator = function(d) {
      return d[this.target].year();
    };

    return YearBucket;

  })(TimeBucket);

  this.MonthBucket = (function(_super) {
    __extends(MonthBucket, _super);

    function MonthBucket() {
      return MonthBucket.__super__.constructor.apply(this, arguments);
    }

    MonthBucket.prototype.comparator = function(d) {
      return d[this.target].month();
    };

    return MonthBucket;

  })(TimeBucket);

  this.DayOfTheWeekBucket = (function(_super) {
    var day_name;

    __extends(DayOfTheWeekBucket, _super);

    function DayOfTheWeekBucket() {
      return DayOfTheWeekBucket.__super__.constructor.apply(this, arguments);
    }

    day_name = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

    DayOfTheWeekBucket.prototype.comparator = function(d) {
      var day;
      day = d[this.target].day();
      return day_name[day];
    };

    return DayOfTheWeekBucket;

  })(TimeBucket);

  this.QuarterBucket = (function(_super) {
    __extends(QuarterBucket, _super);

    function QuarterBucket() {
      return QuarterBucket.__super__.constructor.apply(this, arguments);
    }

    QuarterBucket.prototype.comparator = function(d) {
      var month;
      month = d[this.target].month();
      if (month <= 2) {
        return 'Q1';
      } else if (month > 3 && month <= 5) {
        return 'Q2';
      } else if (month > 5 && month <= 8) {
        return 'Q3';
      } else {
        return 'Q4';
      }
    };

    return QuarterBucket;

  })(TimeBucket);

}).call(this);
